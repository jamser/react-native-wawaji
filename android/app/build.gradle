apply plugin: "com.android.application"

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}
/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"
android {
    compileSdkVersion 25
    buildToolsVersion '25.0.0'

    defaultConfig {
        applicationId "com.starcandy.wawaji"
        minSdkVersion 17
        targetSdkVersion 22
        versionCode 30
        versionName "2.1.0"
        ndk{
            abiFilters /*'armeabi' , */'armeabi-v7a'
        }
        multiDexEnabled true
    }
    useLibrary 'org.apache.http.legacy'
    signingConfigs {
        release {
            keyAlias 'havefun'
            keyPassword '123456'
            storeFile file('../keystore.jks')
            storePassword '123456'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            debuggable false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            manifestPlaceholders = [
                    GETUI_APP_ID    : "RVl26W3MvX7B95Iglm3553",
                    GETUI_APP_KEY   : "c8YrnF6XjOAsgXuMaDSAq7",
                    GETUI_APP_SECRET: "P50e7r7D4D9fbT2BjvIFY9"
            ]
            buildConfigField "String", "CODEPUSH_KEY", '"TGNDQVZTcM4mE0sKZ4an4HtI0_Cj3fde4817-d85b-477d-95df-566f040c2d3d"'
        }
       debug {
            minifyEnabled false
            debuggable true
            signingConfig signingConfigs.release
           manifestPlaceholders = [
                   GETUI_APP_ID    : "l0lMLAgl9f6Bnc5GLGxvk4",
                   GETUI_APP_KEY   : "bQX4iSiXOq6wuLfIrJHNr1",
                   GETUI_APP_SECRET: "71QpxtSLREAAPK02z4l7L"
           ]
           buildConfigField "String", "CODEPUSH_KEY", '"JxMKsa6MxGB1dj9UQzubeyV1F5uN3fde4817-d85b-477d-95df-566f040c2d3d"'
        }
        android.applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    def fileName
                    if (variant.buildType.name == "release") {
                        fileName = "${defaultConfig.versionName}_${releaseTime()}_${variant.productFlavors[0].name}.apk"
                    } else {
                        fileName = "dev_${defaultConfig.versionName}_${releaseTime()}.apk"
                    }
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    productFlavors {
       /* app {
            applicationId "com.starcandy.wawaji.debug"
        }*/
        oppo {}
        vivo {}
        cn360 {}
        tencent {}
        xiaomi {}
        baidu {}
        wandoujia {}
        mmeizu {}
        havefun {}
        havefun0 {}
        havefun1 {}
        havefun2 {}
        havefun3 {}
        havefun4 {}
        havefun5 {}
        havefun6 {}
        havefun7 {}
        havefun8 {}
        havefun9 {}
        havefun10 {}
        havefun11 {}
        havefun12 {}
        havefun13 {}
        havefun14 {}
        havefun15 {}
        gongzhonghao {}
        huawei {}
        gdt1 {}
        gdt2 {}
        gdt3 {}
        wx1 {}
        wx2 {}
        wx3 {}
        wb1 {}
        wb2 {}
        wb3 {}
    }
    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }
}

dependencies {
    compile project(':react-native-view-shot')
    compile project(':react-native-code-push')
    compile project(':react-native-picker')
    compile project(':react-native-getui')
    compile project(':react-native-sound')
    compile project(':react-native-wechat')

    compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.facebook.react:react-native:0.49.5"  // From node_modules
    compile(name: 'LiteAVSDK_Smart_3.7.3403', ext: 'aar')
    compile 'com.tencent.bugly:crashreport_upgrade:latest.release'//其中latest.release指代最新版本号
    compile 'com.tencent.bugly:nativecrashreport:latest.release' //其中latest.release指代最新版本号
    compile 'com.google.code.gson:gson:2.8.2'
    compile 'com.android.support:multidex:1.0.1'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
